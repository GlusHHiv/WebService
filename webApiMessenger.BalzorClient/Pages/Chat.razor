@page "/chat/{groupChatId:int?}"
@using Microsoft.AspNetCore.SignalR.Client
@inject JwtService JwtService
@inject IOptions<ServerSettings> ServerSettingsOptions
@attribute [Authorize]
<h3>ChatHub</h3>

<div class="card my-3">
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Count</th>
        </tr>
        </thead>
        <tbody>
            @if (_allGroupChat != null)
            {
                @foreach (var group in _allGroupChat)
                {
                    <tr>
                        <td>@group.Id</td>
                        <td>@group.Members.Count</td>
                        <td>
                            <button class="btn btn-success">
                                Подключиться к группе
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@*<div class="card">
    <div><input type="text" @bind-value="@GroupChatId" /><button @onclick="JoinToGroup">Join</button></div>
    <span>GroupId: @GroupChatId</span>
</div>*@

<div class="card">
    <span>ConnectionId: @Connection?.ConnectionId</span>
    <span>State: @Connection?.State</span>
</div>

<div class="card m-2">
    <div class="p-3 h-50">
        @foreach (var message in _messages)
        {
            <div>
                <span>@message</span>
            </div>
        }
    </div>
    <div class="d-flex">
        <input class="flex-grow-1" type="text" @bind-value="@Message" />
        <button @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    private List<string> _messages = new List<string>();
    private List<GroupChatDTO>? _myGroupChat;
    private List<GroupChatDTO>? _allGroupChat;

    public string Message { get; set; } = string.Empty;

    public string? SayHelloMessage { get; set; }
    public string? Name { get; set; }

    public HubConnection? Connection { get; set; }
    public int? GroupChatId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var baseUrl = ServerSettingsOptions.Value.Uri;
        var jwt = await JwtService.GetJwtToken();
        Connection = new HubConnectionBuilder().WithUrl($"{baseUrl}chathub", options =>
        {
            //options.Headers.Add("Authorization", $"Bearer {jwt}");
            options.AccessTokenProvider = () => Task.FromResult(jwt);
        }).Build();

        Connection.On<string>("ReceiveSayHello", sayHelloMessage =>
        {
            SayHelloMessage = sayHelloMessage;
            StateHasChanged();
        });
        Connection.On<string>("ReceiveMessage", message =>
        {
            _messages.Add(message);
            StateHasChanged();
        });
        Connection.On<List<GroupChatDTO>>("ReceiveMyGroupChats", chats =>
        {
            _myGroupChat = chats;
            StateHasChanged();
        });
        Connection.On<List<GroupChatDTO>>("ReceiveAllGroupChats", chats =>
        {
            _allGroupChat = chats;
            StateHasChanged();
        });

        await Connection.StartAsync();
        await Connection.SendAsync("SayHello", "World");
        await Connection.SendAsync("GetAllGroupChats");
        await Connection.SendAsync("GetMyGroupChats");
        await base.OnInitializedAsync();
    }

    public async void SayHello()
    {
        await Connection?.SendAsync("SayHello", Name);
    }

    public async void SendMessage()
    {
        if (!string.IsNullOrEmpty(Message) && !string.IsNullOrEmpty(GroupChatId))
        {
            await Connection?.SendAsync("SendMessage", GroupChatId, Message);
            _messages.Add(Message);
            Message = string.Empty;
        }

    }

    private async Task JoinToGroup()
    {
        if (GroupChatId != null)
        {
            await Connection.SendAsync("Join", GroupChatId);
        }
    }

}
