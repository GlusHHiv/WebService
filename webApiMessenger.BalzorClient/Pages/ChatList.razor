@page "/chatlist"
@using Microsoft.AspNetCore.SignalR.Client
@inject JwtService JwtService
@inject NavigationManager NavigationManager
@inject IOptions<ServerSettings> ServerSettingsOptions
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<div class="d-flex flex-row">
    <h3>Чаты</h3>
    
</div>
<div class="card my-3 p-2 d-flex gap-1">
    @if (_myGroupChat != null)
    {
        @foreach (var group in _myGroupChat)
        {
            <ChatListItem GroupChat="@group" UserName="@_userName" />
        }
    }
</div>


@code {
    private List<GroupChatDTO>? _myGroupChat;

    public HubConnection? Connection { get; set; }

    [Parameter]
    public int? GroupChatId { get; set; }

    private AuthenticationState? _authenticationState = null;
    private string _userName;

    protected override async Task OnInitializedAsync()
    {
        _authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _userName = _authenticationState!.User!.Identity!.Name!;
        var baseUrl = ServerSettingsOptions.Value.Uri;
        var jwt = await JwtService.GetJwtToken();
        Connection = new HubConnectionBuilder().WithUrl($"{baseUrl}chathub", options =>
        {
            options.AccessTokenProvider = () => Task.FromResult(jwt);
        }).Build();
        
        Connection.On<List<GroupChatDTO>>("ReceiveMyGroupChats", chats =>
        {
            _myGroupChat = chats;
            StateHasChanged();
        });
        await Connection.StartAsync();
        await Connection.SendAsync("GetMyGroupChats");

        if (GroupChatId.HasValue)
        {
            await Connection.SendAsync("Join", GroupChatId.Value);
        }
        
        await base.OnInitializedAsync();
    }
    
    public async Task MoveToGroup(int id)
    {
        NavigationManager.NavigateTo($"/chat/{id}");
    }
}