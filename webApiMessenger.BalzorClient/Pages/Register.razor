@page "/register"
@using System.Net.Http.Headers
@inject IOptions<ServerSettings> ServerSettingsOptions
@inject ILocalStorageService LocalStorage
@inject HttpClientFactory HttpClientFactory
@inject SignInOrUpService SignInOrUpService
<PageTitle>Registeration</PageTitle>

<h4>Registeration</h4>

<div class="card">
    <div>
        <div><p>Nick: <input type="text" @bind-value="@Nick" /></p></div>
        <div><p>Email: <input type="text" @bind-value="@Email" /></p></div>
        <div><p>Login: <input type="text" @bind-value="@Login" /></p></div>
        <div><p>Password: <input type="text" @bind-value="@Password" /></p></div>
        <div><p>Age: <input type="number" @bind-value="@Age" /></p></div>
        <button @onclick="Registration">Register</button>
    </div>
    <p class="text-wrap text-break">Message: @RegisterResult</p>
    <div class="card">
        <p>Schema: @_serverSettings.Schema</p>
        <p>Host: @_serverSettings.Host</p>
        <p>Port: @_serverSettings.Port</p>
        <p>BaseUrl: @_serverSettings.BaseUrl</p>
    </div>
    <div class="card mt-3">
        <div class="card-body">
            <p>Id: @_user?.Id</p>
            <p>Nick: @_user?.Nick</p>
            <p>Age: @_user?.Age</p>
            <p>Login: @_user?.Login</p>
            <p>Email: @_user?.Email</p>
        </div>
        <div class="card-footer">
            <button @onclick="Me">ME</button>
        </div>
    </div>
</div>

@code {
    public string? RegisterResult { get; set; }
    public string? Nick { get; set; }
    public string? Email { get; set; }
    public string? Login { get; set; }
    public string? Password { get; set; }
    public int? Age { get; set; }
    private ServerSettings _serverSettings;
    private HttpClient _client;
    private UserPublicDTO? _user;

    protected override async Task OnInitializedAsync()
    {
        _serverSettings = ServerSettingsOptions.Value;
        _client = await HttpClientFactory.CreateHttpClientAsync();
        await base.OnInitializedAsync();
    }

    public async Task Registration()
    {
        if (Nick != null & Email != null & Login != null & Password != null & Age != null  )
        {
            // await SignInOrUpService.SignUp();
            var response = await _client.PostAsJsonAsync("User/Register", new
            {
                Nick, Email, Login, Password, Age
            });
            if (response.IsSuccessStatusCode)
            {
                var jwt = await response.Content.ReadAsStringAsync();
                RegisterResult = jwt;
                _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt);
                await LocalStorage.SetItemAsStringAsync("jwt", jwt);
            }
        }
    }

    public async Task Me()
    {
        _user = await _client.GetFromJsonAsync<UserPublicDTO>("User/Me");
    }
}
